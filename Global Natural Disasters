{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2403A51L34/AIML_2025/blob/main/Global%20Natural%20Disasters\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Full supervised training + reports pipeline for wildfire severity classification\n",
        "# Save as train_all_classifiers.py or paste into a notebook cell and run.\n",
        "# Requires: scikit-learn, pandas, numpy, scipy. Optional: xgboost, lightgbm for extra models.\n",
        "\n",
        "import os\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from scipy.sparse import hstack, csr_matrix\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n",
        "from sklearn.cluster import KMeans\n",
        "\n",
        "# classifiers\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.svm import LinearSVC, SVC\n",
        "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier, ExtraTreesClassifier\n",
        "from sklearn.ensemble import HistGradientBoostingClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "\n",
        "# Optionally available\n",
        "try:\n",
        "    import xgboost as xgb\n",
        "    has_xgb = True\n",
        "except Exception:\n",
        "    has_xgb = False\n",
        "try:\n",
        "    import lightgbm as lgb\n",
        "    has_lgb = True\n",
        "except Exception:\n",
        "    has_lgb = False\n",
        "\n",
        "# -------------------- USER CONFIG --------------------\n",
        "CSV_PATH = \"/content/Data.csv\"   # path to the uploaded dataset\n",
        "TEXT_COL = None   # set e.g. \"Description\" if you know it, else None to auto-detect\n",
        "LABEL_COL = None  # set the ground-truth label column name if available, else None\n",
        "BIN_NUMERIC_LABEL = True   # if label numeric & BIN_NUMERIC_LABEL True -> quantile bin into 3 classes\n",
        "NGRAM_MAX_FEATURES = 4000\n",
        "TEST_SIZE = 0.20\n",
        "RANDOM_STATE = 42\n",
        "RESULTS_DIR = \"/mnt/data/results\"\n",
        "os.makedirs(RESULTS_DIR, exist_ok=True)\n",
        "# -----------------------------------------------------\n",
        "\n",
        "# --------------- Load ---------------\n",
        "if not os.path.exists(CSV_PATH):\n",
        "    raise FileNotFoundError(f\" /content/Data.csv: {CSV_PATH}\")\n",
        "df = pd.read_csv(CSV_PATH)\n",
        "print(\"Loaded:\", CSV_PATH, \" shape:\", df.shape)\n",
        "display(df.head())\n",
        "\n",
        "# --------------- Detect columns (if not provided) ---------------\n",
        "if TEXT_COL is None:\n",
        "    text_candidates = [c for c in df.columns if any(k in c.lower() for k in [\"desc\",\"description\",\"event\",\"narr\",\"text\",\"report\",\"note\"])]\n",
        "    if text_candidates:\n",
        "        TEXT_COL = text_candidates[0]\n",
        "    else:\n",
        "        # fallback: object column with largest avg length\n",
        "        obj_cols = df.select_dtypes(include=\"object\").columns.tolist()\n",
        "        if obj_cols:\n",
        "            avg_len = {c: df[c].dropna().astype(str).map(len).mean() for c in obj_cols}\n",
        "            TEXT_COL = max(avg_len, key=avg_len.get)\n",
        "print(\"Using text column:\", TEXT_COL)\n",
        "\n",
        "if LABEL_COL is None:\n",
        "    label_candidates = [c for c in df.columns if any(k in c.lower() for k in [\"severity\",\"label\",\"class\",\"target\",\"level\"])]\n",
        "    LABEL_COL = label_candidates[0] if label_candidates else None\n",
        "print(\"Using label column (None means create surrogate):\", LABEL_COL)\n",
        "\n",
        "# --------------- Prepare labels ---------------\n",
        "df2 = df.copy()\n",
        "\n",
        "if LABEL_COL is not None and LABEL_COL in df2.columns and df2[LABEL_COL].notna().sum()>0:\n",
        "    y_raw = df2[LABEL_COL]\n",
        "    if np.issubdtype(y_raw.dtype, np.number) and BIN_NUMERIC_LABEL:\n",
        "        df2[\"__label__\"] = pd.qcut(y_raw, q=3, labels=[\"low\",\"medium\",\"high\"])\n",
        "        print(f\"Binned numeric label column '{LABEL_COL}' into low/medium/high.\")\n",
        "    else:\n",
        "        df2[\"__label__\"] = y_raw.astype(str).fillna(\"unknown\")\n",
        "else:\n",
        "    # create surrogate labels:\n",
        "    numeric_cols = df2.select_dtypes(include=[np.number]).columns.tolist()\n",
        "    if numeric_cols:\n",
        "        # pick a numeric proxy if it looks like fire size/damage\n",
        "        chosen = None\n",
        "        for name in numeric_cols:\n",
        "            if any(k in name.lower() for k in [\"size\",\"acres\",\"area\",\"burn\",\"ha\",\"hectare\",\"loss\",\"damage\"]):\n",
        "                chosen = name; break\n",
        "        if chosen is None:\n",
        "            chosen = numeric_cols[0]\n",
        "        try:\n",
        "            df2[\"__label__\"] = pd.qcut(df2[chosen].fillna(df2[chosen].median()), q=3, labels=[\"low\",\"medium\",\"high\"])\n",
        "            print(f\"No label provided: binned numeric column '{chosen}' into low/medium/high as surrogate.\")\n",
        "        except Exception:\n",
        "            # fallback KMeans on numeric features\n",
        "            km = KMeans(n_clusters=3, random_state=RANDOM_STATE)\n",
        "            numeric_data = df2[numeric_cols].fillna(0).astype(float)\n",
        "            clusters = km.fit_predict(numeric_data)\n",
        "            df2[\"__label__\"] = pd.Series(clusters).map({0:\"low\",1:\"medium\",2:\"high\"})\n",
        "            print(\"Used KMeans on numeric features to create surrogate labels.\")\n",
        "    else:\n",
        "        # final fallback: KMeans on encoded object columns\n",
        "        obj_cols = df2.select_dtypes(include=\"object\").columns.tolist()\n",
        "        if not obj_cols:\n",
        "            raise ValueError(\"No columns available to synthesize labels. Provide a LABEL_COL.\")\n",
        "        enc = OneHotEncoder(handle_unknown=\"ignore\")\n",
        "        X_enc = enc.fit_transform(df2[obj_cols].fillna(\"MISSING\"))\n",
        "        km = KMeans(n_clusters=3, random_state=RANDOM_STATE)\n",
        "        clusters = km.fit_predict(X_enc)\n",
        "        df2[\"__label__\"] = pd.Series(clusters).map({0:\"low\",1:\"medium\",2:\"high\"})\n",
        "        print(\"No numeric cols: used KMeans on encoded object columns for surrogate labels.\")\n",
        "\n",
        "y = df2[\"__label__\"].astype(str)\n",
        "print(\"Label distribution:\\n\", y.value_counts().to_dict())\n",
        "\n",
        "# --------------- Build feature matrices ---------------\n",
        "# Exclude text and label from structured features\n",
        "exclude = [TEXT_COL, \"__label__\"]\n",
        "feature_cols = [c for c in df2.columns if c not in exclude]\n",
        "numeric_cols = [c for c in feature_cols if np.issubdtype(df2[c].dtype, np.number)]\n",
        "cat_cols = [c for c in feature_cols if c not in numeric_cols]\n",
        "\n",
        "# Filter high-cardinality cats (likely IDs/coords)\n",
        "filtered_cat_cols = []\n",
        "for c in cat_cols:\n",
        "    if df2[c].nunique() > 1000:\n",
        "        continue\n",
        "    if \"id\" in c.lower() and df2[c].nunique() > 50:\n",
        "        continue\n",
        "    filtered_cat_cols.append(c)\n",
        "cat_cols = filtered_cat_cols\n",
        "\n",
        "print(\"Numeric cols used:\", numeric_cols)\n",
        "print(\"Categorical cols used:\", cat_cols)\n",
        "\n",
        "# Numeric features\n",
        "if numeric_cols:\n",
        "    X_num = df2[numeric_cols].fillna(df2[numeric_cols].median()).astype(float)\n",
        "    X_num_scaled = StandardScaler().fit_transform(X_num)\n",
        "    X_num_sparse = csr_matrix(X_num_scaled)\n",
        "else:\n",
        "    X_num_sparse = None\n",
        "\n",
        "# Categorical features\n",
        "if cat_cols:\n",
        "    ohe = OneHotEncoder(handle_unknown=\"ignore\")\n",
        "    X_cat_ohe = ohe.fit_transform(df2[cat_cols].fillna(\"MISSING\").astype(str))\n",
        "else:\n",
        "    X_cat_ohe = None\n",
        "\n",
        "# Text features\n",
        "if TEXT_COL and TEXT_COL in df2.columns:\n",
        "    tfidf = TfidfVectorizer(stop_words=\"english\", max_features=NGRAM_MAX_FEATURES, ngram_range=(1,2))\n",
        "    X_text = tfidf.fit_transform(df2[TEXT_COL].fillna(\"\").astype(str))\n",
        "else:\n",
        "    X_text = None\n",
        "\n",
        "# Combine\n",
        "features = [m for m in [X_num_sparse, X_cat_ohe, X_text] if m is not None]\n",
        "if not features:\n",
        "    raise ValueError(\"No features available to train on. Check CSV and columns.\")\n",
        "X = hstack(features).tocsr()\n",
        "print(\"Final feature matrix shape:\", X.shape)\n",
        "\n",
        "# --------------- Train/test split ---------------\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=TEST_SIZE, stratify=y, random_state=RANDOM_STATE)\n",
        "print(\"Train shape:\", X_train.shape, \"Test shape:\", X_test.shape)\n",
        "\n",
        "# --------------- Classifiers ---------------\n",
        "classifiers = {\n",
        "    \"LogisticRegression\": LogisticRegression(max_iter=1000, solver=\"liblinear\"),\n",
        "    \"LinearSVC\": LinearSVC(max_iter=10000),\n",
        "    \"SVC_rbf\": SVC(kernel=\"rbf\", probability=True),\n",
        "    \"RandomForest\": RandomForestClassifier(n_estimators=200, n_jobs=-1, random_state=RANDOM_STATE),\n",
        "    \"ExtraTrees\": ExtraTreesClassifier(n_estimators=100, random_state=RANDOM_STATE),\n",
        "    \"GradientBoosting\": GradientBoostingClassifier(random_state=RANDOM_STATE),\n",
        "    \"HistGradientBoosting\": HistGradientBoostingClassifier(random_state=RANDOM_STATE),\n",
        "    \"AdaBoost\": AdaBoostClassifier(n_estimators=100, random_state=RANDOM_STATE),\n",
        "    \"DecisionTree\": DecisionTreeClassifier(random_state=RANDOM_STATE),\n",
        "    \"KNN\": KNeighborsClassifier(n_neighbors=5),\n",
        "    \"MultinomialNB\": MultinomialNB(),\n",
        "    \"MLP\": MLPClassifier(max_iter=500, random_state=RANDOM_STATE)\n",
        "}\n",
        "if has_xgb:\n",
        "    classifiers[\"XGBoost\"] = xgb.XGBClassifier(use_label_encoder=False, eval_metric=\"mlogloss\", random_state=RANDOM_STATE)\n",
        "if has_lgb:\n",
        "    classifiers[\"LightGBM\"] = lgb.LGBMClassifier(random_state=RANDOM_STATE)\n",
        "\n",
        "# --------------- Helper: non-negative version for MultinomialNB ---------------\n",
        "X_train_pos = X_train.copy().astype(float)\n",
        "X_test_pos = X_test.copy().astype(float)\n",
        "if X_num_sparse is not None:\n",
        "    num_width = X_num_sparse.shape[1]\n",
        "    try:\n",
        "        num_min = X_train_pos[:, :num_width].toarray().min()\n",
        "        if num_min < 0:\n",
        "            shift = -num_min + 1e-6\n",
        "            X_train_pos[:, :num_width] = csr_matrix(X_train_pos[:, :num_width].toarray() + shift)\n",
        "            X_test_pos[:, :num_width] = csr_matrix(X_test_pos[:, :num_width].toarray() + shift)\n",
        "    except MemoryError:\n",
        "        # can't convert to dense safely; create a copy that zeros numeric part (conservative)\n",
        "        print(\"MemoryWarning: Could not create shifted dense numeric slice. MultinomialNB might be less reliable.\")\n",
        "        pass\n",
        "\n",
        "# --------------- Train & evaluate ---------------\n",
        "results = {}\n",
        "for name, clf in classifiers.items():\n",
        "    print(\"=\"*80)\n",
        "    print(f\"Training and evaluating: {name}\")\n",
        "    try:\n",
        "        # special-case MultinomialNB\n",
        "        if name == \"MultinomialNB\":\n",
        "            clf.fit(X_train_pos, y_train)\n",
        "            y_pred = clf.predict(X_test_pos)\n",
        "        elif name == \"HistGradientBoosting\":\n",
        "            # HistGradientBoosting in some sklearn versions expects dense input; try and fallback to skipping\n",
        "            try:\n",
        "                clf.fit(X_train, y_train)\n",
        "                y_pred = clf.predict(X_test)\n",
        "            except Exception as e:\n",
        "                # attempt dense conversion if safe\n",
        "                try:\n",
        "                    mem_needed = X_train.shape[0] * X_train.shape[1] * 8 / (1024**3)  # approx GB\n",
        "                    if mem_needed < 3.0:\n",
        "                        clf.fit(X_train.toarray(), y_train)\n",
        "                        y_pred = clf.predict(X_test.toarray())\n",
        "                    else:\n",
        "                        raise MemoryError(f\"Dense conversion would require ~{mem_needed:.2f} GB; skipping {name}.\")\n",
        "                except Exception as e2:\n",
        "                    raise e2\n",
        "        else:\n",
        "            clf.fit(X_train, y_train)\n",
        "            y_pred = clf.predict(X_test)\n",
        "\n",
        "        acc = accuracy_score(y_test, y_pred)\n",
        "        cr = classification_report(y_test, y_pred, digits=4)\n",
        "        cm = confusion_matrix(y_test, y_pred, labels=np.unique(y))\n",
        "        print(\"Accuracy:\", round(acc,4))\n",
        "        print(\"Classification report:\\n\", cr)\n",
        "        print(\"Confusion matrix:\\n\", cm)\n",
        "        # Save textual report\n",
        "        with open(os.path.join(RESULTS_DIR, f\"{name}_report.txt\"), \"w\") as f:\n",
        "            f.write(f\"Accuracy: {acc}\\n\\n\")\n",
        "            f.write(\"Classification report:\\n\")\n",
        "            f.write(cr)\n",
        "            f.write(\"\\nConfusion matrix:\\n\")\n",
        "            f.write(np.array2string(cm))\n",
        "        results[name] = {\"clf\": clf, \"accuracy\": acc, \"report\": cr, \"confusion\": cm}\n",
        "    except MemoryError as me:\n",
        "        print(f\"Skipped {name} due to memory: {me}\")\n",
        "    except Exception as e:\n",
        "        print(f\"Failed {name}: {e}\")\n",
        "\n",
        "print(\"\\nAll done. Reports and models saved in:\", RESULTS_DIR)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "lDGFkKvBc3LL",
        "outputId": "f254ace9-1424-43f8-a87d-a5cacdb6f6ab"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loaded: /content/Data.csv  shape: (5393, 10)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "            ID                                       Title  \\\n",
              "0  EONET_14198          HOPE Wildfire  Stevens  Washington   \n",
              "1  EONET_14200           Hot Canyon Wildfire  Elko  Nevada   \n",
              "2  EONET_14215  13 MILE FIRE Wildfire  Palm Beach  Florida   \n",
              "3  EONET_14209        UDC Fire Wildfire  Jefferson  Oregon   \n",
              "4  EONET_14199        0482 SUNRISE Wildfire  Crook  Oregon   \n",
              "\n",
              "                        Description Category_title  Geometry_Coordinates_1  \\\n",
              "0  15 Miles N from KETTLE FALLS  WA      Wildfires  -117.982361  48.821248   \n",
              "1     10 Miles NW from Montello  NV      Wildfires     -114.336333  41.368   \n",
              "2   21 Miles S from BELLE GLADE  FL      Wildfires      -80.79  26.3833333   \n",
              "3  1 Miles SW from warm springs  OR      Wildfires  -121.288889  44.803444   \n",
              "4        8 Miles S from Paulina  OR      Wildfires  -120.038167  44.019167   \n",
              "\n",
              "  Geometry_Coordinates_2 Geometry_Coordinates_3 Geometry_Coordinates_4  \\\n",
              "0                    NaN                    NaN                    NaN   \n",
              "1                    NaN                    NaN                    NaN   \n",
              "2                    NaN                    NaN                    NaN   \n",
              "3                    NaN                    NaN                    NaN   \n",
              "4                    NaN                    NaN                    NaN   \n",
              "\n",
              "         Date      Time  \n",
              "0  2025-07-08  16:38:00  \n",
              "1  2025-07-08  16:18:00  \n",
              "2  2025-07-08  15:34:00  \n",
              "3  2025-07-07  22:59:00  \n",
              "4  2025-07-07  14:45:00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-212be552-c441-4743-bf7c-404de5102aa7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Title</th>\n",
              "      <th>Description</th>\n",
              "      <th>Category_title</th>\n",
              "      <th>Geometry_Coordinates_1</th>\n",
              "      <th>Geometry_Coordinates_2</th>\n",
              "      <th>Geometry_Coordinates_3</th>\n",
              "      <th>Geometry_Coordinates_4</th>\n",
              "      <th>Date</th>\n",
              "      <th>Time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>EONET_14198</td>\n",
              "      <td>HOPE Wildfire  Stevens  Washington</td>\n",
              "      <td>15 Miles N from KETTLE FALLS  WA</td>\n",
              "      <td>Wildfires</td>\n",
              "      <td>-117.982361  48.821248</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2025-07-08</td>\n",
              "      <td>16:38:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>EONET_14200</td>\n",
              "      <td>Hot Canyon Wildfire  Elko  Nevada</td>\n",
              "      <td>10 Miles NW from Montello  NV</td>\n",
              "      <td>Wildfires</td>\n",
              "      <td>-114.336333  41.368</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2025-07-08</td>\n",
              "      <td>16:18:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>EONET_14215</td>\n",
              "      <td>13 MILE FIRE Wildfire  Palm Beach  Florida</td>\n",
              "      <td>21 Miles S from BELLE GLADE  FL</td>\n",
              "      <td>Wildfires</td>\n",
              "      <td>-80.79  26.3833333</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2025-07-08</td>\n",
              "      <td>15:34:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>EONET_14209</td>\n",
              "      <td>UDC Fire Wildfire  Jefferson  Oregon</td>\n",
              "      <td>1 Miles SW from warm springs  OR</td>\n",
              "      <td>Wildfires</td>\n",
              "      <td>-121.288889  44.803444</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2025-07-07</td>\n",
              "      <td>22:59:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>EONET_14199</td>\n",
              "      <td>0482 SUNRISE Wildfire  Crook  Oregon</td>\n",
              "      <td>8 Miles S from Paulina  OR</td>\n",
              "      <td>Wildfires</td>\n",
              "      <td>-120.038167  44.019167</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2025-07-07</td>\n",
              "      <td>14:45:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-212be552-c441-4743-bf7c-404de5102aa7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-212be552-c441-4743-bf7c-404de5102aa7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-212be552-c441-4743-bf7c-404de5102aa7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-72b1db16-22b4-478e-8eea-7041647c8574\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-72b1db16-22b4-478e-8eea-7041647c8574')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-72b1db16-22b4-478e-8eea-7041647c8574 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using text column: Description\n",
            "Using label column (None means create surrogate): None\n",
            "No numeric cols: used KMeans on encoded object columns for surrogate labels.\n",
            "Label distribution:\n",
            " {'low': 5303, 'medium': 64, 'high': 26}\n",
            "Numeric cols used: []\n",
            "Categorical cols used: ['Category_title', 'Geometry_Coordinates_2', 'Geometry_Coordinates_3', 'Geometry_Coordinates_4', 'Date', 'Time']\n",
            "Final feature matrix shape: (5393, 4025)\n",
            "Train shape: (4314, 4025) Test shape: (1079, 4025)\n",
            "================================================================================\n",
            "Training and evaluating: LogisticRegression\n",
            "Accuracy: 1.0\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "        high     1.0000    1.0000    1.0000         5\n",
            "         low     1.0000    1.0000    1.0000      1061\n",
            "      medium     1.0000    1.0000    1.0000        13\n",
            "\n",
            "    accuracy                         1.0000      1079\n",
            "   macro avg     1.0000    1.0000    1.0000      1079\n",
            "weighted avg     1.0000    1.0000    1.0000      1079\n",
            "\n",
            "Confusion matrix:\n",
            " [[   5    0    0]\n",
            " [   0 1061    0]\n",
            " [   0    0   13]]\n",
            "================================================================================\n",
            "Training and evaluating: LinearSVC\n",
            "Accuracy: 1.0\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "        high     1.0000    1.0000    1.0000         5\n",
            "         low     1.0000    1.0000    1.0000      1061\n",
            "      medium     1.0000    1.0000    1.0000        13\n",
            "\n",
            "    accuracy                         1.0000      1079\n",
            "   macro avg     1.0000    1.0000    1.0000      1079\n",
            "weighted avg     1.0000    1.0000    1.0000      1079\n",
            "\n",
            "Confusion matrix:\n",
            " [[   5    0    0]\n",
            " [   0 1061    0]\n",
            " [   0    0   13]]\n",
            "================================================================================\n",
            "Training and evaluating: SVC_rbf\n",
            "Accuracy: 1.0\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "        high     1.0000    1.0000    1.0000         5\n",
            "         low     1.0000    1.0000    1.0000      1061\n",
            "      medium     1.0000    1.0000    1.0000        13\n",
            "\n",
            "    accuracy                         1.0000      1079\n",
            "   macro avg     1.0000    1.0000    1.0000      1079\n",
            "weighted avg     1.0000    1.0000    1.0000      1079\n",
            "\n",
            "Confusion matrix:\n",
            " [[   5    0    0]\n",
            " [   0 1061    0]\n",
            " [   0    0   13]]\n",
            "================================================================================\n",
            "Training and evaluating: RandomForest\n",
            "Accuracy: 0.9991\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "        high     1.0000    1.0000    1.0000         5\n",
            "         low     0.9991    1.0000    0.9995      1061\n",
            "      medium     1.0000    0.9231    0.9600        13\n",
            "\n",
            "    accuracy                         0.9991      1079\n",
            "   macro avg     0.9997    0.9744    0.9865      1079\n",
            "weighted avg     0.9991    0.9991    0.9991      1079\n",
            "\n",
            "Confusion matrix:\n",
            " [[   5    0    0]\n",
            " [   0 1061    0]\n",
            " [   0    1   12]]\n",
            "================================================================================\n",
            "Training and evaluating: ExtraTrees\n",
            "Accuracy: 0.9991\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "        high     1.0000    1.0000    1.0000         5\n",
            "         low     0.9991    1.0000    0.9995      1061\n",
            "      medium     1.0000    0.9231    0.9600        13\n",
            "\n",
            "    accuracy                         0.9991      1079\n",
            "   macro avg     0.9997    0.9744    0.9865      1079\n",
            "weighted avg     0.9991    0.9991    0.9991      1079\n",
            "\n",
            "Confusion matrix:\n",
            " [[   5    0    0]\n",
            " [   0 1061    0]\n",
            " [   0    1   12]]\n",
            "================================================================================\n",
            "Training and evaluating: GradientBoosting\n",
            "Accuracy: 1.0\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "        high     1.0000    1.0000    1.0000         5\n",
            "         low     1.0000    1.0000    1.0000      1061\n",
            "      medium     1.0000    1.0000    1.0000        13\n",
            "\n",
            "    accuracy                         1.0000      1079\n",
            "   macro avg     1.0000    1.0000    1.0000      1079\n",
            "weighted avg     1.0000    1.0000    1.0000      1079\n",
            "\n",
            "Confusion matrix:\n",
            " [[   5    0    0]\n",
            " [   0 1061    0]\n",
            " [   0    0   13]]\n",
            "================================================================================\n",
            "Training and evaluating: HistGradientBoosting\n",
            "Accuracy: 1.0\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "        high     1.0000    1.0000    1.0000         5\n",
            "         low     1.0000    1.0000    1.0000      1061\n",
            "      medium     1.0000    1.0000    1.0000        13\n",
            "\n",
            "    accuracy                         1.0000      1079\n",
            "   macro avg     1.0000    1.0000    1.0000      1079\n",
            "weighted avg     1.0000    1.0000    1.0000      1079\n",
            "\n",
            "Confusion matrix:\n",
            " [[   5    0    0]\n",
            " [   0 1061    0]\n",
            " [   0    0   13]]\n",
            "================================================================================\n",
            "Training and evaluating: AdaBoost\n",
            "Accuracy: 1.0\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "        high     1.0000    1.0000    1.0000         5\n",
            "         low     1.0000    1.0000    1.0000      1061\n",
            "      medium     1.0000    1.0000    1.0000        13\n",
            "\n",
            "    accuracy                         1.0000      1079\n",
            "   macro avg     1.0000    1.0000    1.0000      1079\n",
            "weighted avg     1.0000    1.0000    1.0000      1079\n",
            "\n",
            "Confusion matrix:\n",
            " [[   5    0    0]\n",
            " [   0 1061    0]\n",
            " [   0    0   13]]\n",
            "================================================================================\n",
            "Training and evaluating: DecisionTree\n",
            "Accuracy: 1.0\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "        high     1.0000    1.0000    1.0000         5\n",
            "         low     1.0000    1.0000    1.0000      1061\n",
            "      medium     1.0000    1.0000    1.0000        13\n",
            "\n",
            "    accuracy                         1.0000      1079\n",
            "   macro avg     1.0000    1.0000    1.0000      1079\n",
            "weighted avg     1.0000    1.0000    1.0000      1079\n",
            "\n",
            "Confusion matrix:\n",
            " [[   5    0    0]\n",
            " [   0 1061    0]\n",
            " [   0    0   13]]\n",
            "================================================================================\n",
            "Training and evaluating: KNN\n",
            "Accuracy: 1.0\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "        high     1.0000    1.0000    1.0000         5\n",
            "         low     1.0000    1.0000    1.0000      1061\n",
            "      medium     1.0000    1.0000    1.0000        13\n",
            "\n",
            "    accuracy                         1.0000      1079\n",
            "   macro avg     1.0000    1.0000    1.0000      1079\n",
            "weighted avg     1.0000    1.0000    1.0000      1079\n",
            "\n",
            "Confusion matrix:\n",
            " [[   5    0    0]\n",
            " [   0 1061    0]\n",
            " [   0    0   13]]\n",
            "================================================================================\n",
            "Training and evaluating: MultinomialNB\n",
            "Accuracy: 0.9833\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "        high     0.0000    0.0000    0.0000         5\n",
            "         low     0.9833    1.0000    0.9916      1061\n",
            "      medium     0.0000    0.0000    0.0000        13\n",
            "\n",
            "    accuracy                         0.9833      1079\n",
            "   macro avg     0.3278    0.3333    0.3305      1079\n",
            "weighted avg     0.9669    0.9833    0.9750      1079\n",
            "\n",
            "Confusion matrix:\n",
            " [[   0    5    0]\n",
            " [   0 1061    0]\n",
            " [   0   13    0]]\n",
            "================================================================================\n",
            "Training and evaluating: MLP\n",
            "Accuracy: 1.0\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "        high     1.0000    1.0000    1.0000         5\n",
            "         low     1.0000    1.0000    1.0000      1061\n",
            "      medium     1.0000    1.0000    1.0000        13\n",
            "\n",
            "    accuracy                         1.0000      1079\n",
            "   macro avg     1.0000    1.0000    1.0000      1079\n",
            "weighted avg     1.0000    1.0000    1.0000      1079\n",
            "\n",
            "Confusion matrix:\n",
            " [[   5    0    0]\n",
            " [   0 1061    0]\n",
            " [   0    0   13]]\n",
            "================================================================================\n",
            "Training and evaluating: XGBoost\n",
            "Failed XGBoost: Invalid classes inferred from unique values of `y`.  Expected: [0 1 2], got ['high' 'low' 'medium']\n",
            "================================================================================\n",
            "Training and evaluating: LightGBM\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.003427 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 548\n",
            "[LightGBM] [Info] Number of data points in the train set: 4314, number of used features: 97\n",
            "[LightGBM] [Info] Start training from score -5.325098\n",
            "[LightGBM] [Info] Start training from score -0.016831\n",
            "[LightGBM] [Info] Start training from score -4.437795\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "Accuracy: 1.0\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "        high     1.0000    1.0000    1.0000         5\n",
            "         low     1.0000    1.0000    1.0000      1061\n",
            "      medium     1.0000    1.0000    1.0000        13\n",
            "\n",
            "    accuracy                         1.0000      1079\n",
            "   macro avg     1.0000    1.0000    1.0000      1079\n",
            "weighted avg     1.0000    1.0000    1.0000      1079\n",
            "\n",
            "Confusion matrix:\n",
            " [[   5    0    0]\n",
            " [   0 1061    0]\n",
            " [   0    0   13]]\n",
            "\n",
            "All done. Reports and models saved in: /mnt/data/results\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Welcome To Colab",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}